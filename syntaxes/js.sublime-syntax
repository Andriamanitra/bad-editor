%YAML 1.2
---
name: js
scope: source.js
version: 2

file_extensions:
  - js
  - mjs
  - cjs

variables:
  identifier: '[a-zA-Z_$][a-zA-Z0-9_$]*'

  bin_digit: '[01]'
  oct_digit: '[0-7]'
  hex_digit: '[0-9A-Fa-f]'
  dec_integer: '(0|[1-9](?:_?[0-9])*)'

  keywords: |-
    (?x:
        break
      | case
      | catch
      | class
      | const
      | continue
      | debugger
      | default
      | delete
      | do
      | else
      | export
      | extends
      | false
      | finally
      | for
      | function
      | if
      | import
      | in
      | instanceof
      | new
      | null
      | return
      | super
      | switch
      | this
      | throw
      | true
      | try
      | typeof
      | var
      | void
      | while
      | with
     # reserved in strict mode
      | let
      | static
      | yield
     # technically identifiers with special meanings
      | async
      | get
      | set
      | of
     # future reserved words
      | enum
      | implements
      | interface
      | package
      | private
      | protected
      | public
    )

  builtin_functions: |-
    (?x:
        eval
      | isFinite
      | isNaN
      | parseFloat
      | parseInt
      | decodeURI
      | decodeURIComponent
      | encodeURI
      | encodeURIComponent
      | escape
      | unescape
    )

  builtin_objects: |-
    (?x:
        Object
      | Function
      | Boolean
      | Symbol

      | Error
      | AggregateError
      | EvalError
      | RangeError
      | ReferenceError
      | SuppressedERror
      | SyntaxError
      | TypeError
      | URIError
      | InternalError

      | Number
      | BigInt
      | Math
      | Date
      | Temporal

      | String
      | RegExp

      | Map
      | Set
      | WeakMap
      | WeakSet

      | Array
      | TypedArray
      | Uint8ClampedArray
      | (I|Ui)nt(8|16|32)Array
      | Big(I|Ui)nt64Array
      | Float(16|32|64)Array

      | ArrayBuffer
      | SharedArrayBuffer
      | DataView
      | Atomics
      | JSON

      | WeakRef
      | FinalizationRegistry

      | Iterator
      | AsyncIterator
      | Promise
      | GeneratorFunction
      | AsyncGeneratorFunction
      | Generator
      | AsyncGenerator
      | AsyncFunction
      | DisposableStack
      | AsyncDisposableStack

      | Reflect
      | Proxy

      | Intl
    )

contexts:
  main:
    - include: imports
    - include: comments
    - include: literals
    - include: keywords
    - include: operators
    - include: punctuation
    - include: builtins
    - include: identifiers

  literals:
    - include: strings
    - include: regexes
    - include: numbers
    - include: constants

  imports:
    - match: '\bimport\b'
      scope: keyword.control.import.js
      push: import-declaration

  import-declaration:
    - match: '\bfrom\b'
      scope: keyword.control.from.js
    - match: '\bas\b'
      scope: keyword.control.as.js
    - match: '\{'
      scope: punctuation.section.block.js
      push: import-list
    - match: '\*'
      scope: constant.other.wildcard.asterisk.js
    - match: ','
      scope: punctuation.separator.comma.js
    - match: ';'
      scope: punctuation.terminator.statement.js
      pop: true
    - match: '$'
      pop: true

    - include: keywords
    - include: strings
    - include: comments
    - include: identifiers

  import-list:
    - match: '\bas\b'
      scope: keyword.control.as.js
    - match: '\}'
      scope: punctuation.section.block.js
      pop: true
    - include: keywords
    - include: strings
    - include: comments
    - include: identifiers

  comments:
    # Line comments
    - match: '//'
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.line.js
        - match: '$'
          pop: 1

    # Block comments
    - match: '/\*'
      scope: punctuation.definition.comment.begin.js
      push:
        - meta_scope: comment.block.js
        - match: '\*/'
          scope: punctuation.definition.comment.end.js
          pop: 1

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.double.js
        - match: '"'
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: '\\.'
          scope: constant.character.escape.js
        - match: '\n'
          scope: invalid.illegal.newline.js
          pop: 1

    - match: "'"
      scope: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.single.js
        - match: "'"
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: '\\.'
          scope: constant.character.escape.js
        - match: '\n'
          scope: invalid.illegal.newline.js
          pop: 1

    - match: '`'
      scope: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.template.js
        - match: '`'
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: '\$\{'
          scope: punctuation.section.interpolation.begin.js
          push:
            - meta_scope: meta.interpolation.js
            - meta_content_scope: source.js.embedded
            - match: '\}'
              scope: punctuation.section.interpolation.end.js
              pop: 1
            - include: main
        - match: '\\.'
          scope: constant.character.escape.js

  regexes:
    # Match regex when NOT preceded by identifier/number
    - match: '(?<![a-zA-Z0-9_$\)]\s*)(/)((?![/*])[^/\n\r\\]*(?:\\.[^/\n\r\\]*)*)(/)([gimuy]*)'
      scope: string.regexp.js
      captures:
        1: punctuation.definition.string.begin.js
        2: string.regexp.js
        3: punctuation.definition.string.end.js
        4: keyword.other.js

  numbers:
    # Binary
    - match: '\b0[bB]{{bin_digit}}(?:_?{{bin_digit}})*\b'
      scope: constant.numeric.binary.js
    # Octal
    - match: '\b0[oO]{{oct_digit}}(?:_?{{oct_digit}})*\b'
      scope: constant.numeric.octal.js
    # Legacy octal
    - match: '\b0{{oct_digit}}+\b'
      scope: constant.numeric.octal.js
    # Hexadecimal
    - match: '\b0[xX]{{hex_digit}}(?:_?{{hex_digit}})*\b'
      scope: constant.numeric.hex.js
    # Big integer
    - match: '\b{{dec_integer}}n\b'
      scope: constant.numeric.bigint.js
    # Float
    - match: '\b{{dec_integer}}(?:[.]{{dec_integer}})?(?:[eE][+\-]?{{dec_integer}})?\b'
      scope: constant.numeric.js
    - match: '\bNaN\b'
      scope: constant.language.nan.js
    - match: '\bInfinity\b'
      scope: constant.language.infinity.js

  constants:
    - match: '\btrue\b'
      scope: constant.language.boolean.true.js
    - match: '\bfalse\b'
      scope: constant.language.boolean.false.js
    - match: '\bnull\b'
      scope: constant.language.null.js
    - match: '\bundefined\b'
      scope: constant.language.undefined.js

  keywords:
    - match: '\b(?:{{keywords}})\b'
      scope: keyword.js

  builtins:
    - match: '\b(?:{{builtin_objects}})\b'
      scope: support.class.builtin.js
    - match: '\bglobalThis\b'
      scope: variable.languagel.global.js
    - match: '\b(?:{{builtin_functions}})\b'
      scope: support.function.builtin.js

  operators:
    # Arrow function
    - match: '=>'
      scope: keyword.operator.arrow.js
    - match: '\?\?'
      scope: keyword.operator.null-coalescing.js
    - match: '[:?]'
      scope: keyword.operator.ternary.js
    - match: '[+\-*/%<>=!&|^~]'
      scope: keyword.operator.js

  punctuation:
    - match: '[{}]'
      scope: punctuation.section.block.js
    - match: '[\[\]]'
      scope: punctuation.section.brackets.js
    - match: '[()]'
      scope: punctuation.section.group.js
    - match: ';'
      scope: punctuation.terminator.statement.js
    - match: ','
      scope: punctuation.separator.comma.js
    - match: '[?]?\.'
      scope: punctuation.accessor.js

  identifiers:
    - match: '\b{{identifier}}\b'
      scope: variable.js
